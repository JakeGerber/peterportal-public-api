{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PeterPortal Public API provides software developers with easy-access to UC Irvine publicly available data such as: courses information, professor information, grade distribution, and schedule of classes. \ud83d\udd28 Built with: ExpressJS Graphene \ud83d\udc6f\u200d\u2642\ufe0f Works with: FaunaDB ElasticSearch Our Misson \ud83c\udf87 Our mission is to improve the UCI student experience with course planning and encourage student software developers to create open-source applications that are beneficial to the Anteater community. Features Peterportal Public API offers two Web APIs to help you build your app! RESTful API GraphQL API Where does the data come from? We consolidate our data directly from official UCI sources such as: UCI Catalogue, UCI Directory, UCI Public Records Office, and UCI Webreg. We routinely monitor for updates to ensure you get the most accurate information to serve on your application. Disclaimer \ud83d\udc69\u200d\ud83d\udcbb We are currently in the early stages for this project. Every participants are welcomed to integrate this API into your project as a tool. However, if you choose to do so, please be aware that this project is currently in its early release phase. Every user will be considered as testers and are highly encouraged to do their part and submit a bug report if you encounter any issues. Our team will respond as quickly as possible to resolve the issue. Bug If you encountered any issues or bug, please open an issue @ https://github.com/icssc-projects/peterportal-public-api/issues/new Other Disclaimer Although we consolidate our data directly from official UCI sources, this application is by all means, not an official UCI tool. We stride to keep our data as accurate as possible with the limited support we have from UCI. Please take that into consideration while using this API. Terms & Conditions There are no hard policies at the moment for utilizing this tool. However, please refrain from abusing the API by methods such as: sending excessive amount of requests in a small period of time or purposely looking to exploit the system. This tool is here mainly to assist developers in bringing their idea to life to benefit all UCI students. Please don't ruin it for others! \ud83d\ude42","title":"Home"},{"location":"#features","text":"Peterportal Public API offers two Web APIs to help you build your app! RESTful API GraphQL API","title":"Features"},{"location":"#where-does-the-data-come-from","text":"We consolidate our data directly from official UCI sources such as: UCI Catalogue, UCI Directory, UCI Public Records Office, and UCI Webreg. We routinely monitor for updates to ensure you get the most accurate information to serve on your application.","title":"Where does the data come from?"},{"location":"#disclaimer","text":"\ud83d\udc69\u200d\ud83d\udcbb We are currently in the early stages for this project. Every participants are welcomed to integrate this API into your project as a tool. However, if you choose to do so, please be aware that this project is currently in its early release phase. Every user will be considered as testers and are highly encouraged to do their part and submit a bug report if you encounter any issues. Our team will respond as quickly as possible to resolve the issue. Bug If you encountered any issues or bug, please open an issue @ https://github.com/icssc-projects/peterportal-public-api/issues/new Other Disclaimer Although we consolidate our data directly from official UCI sources, this application is by all means, not an official UCI tool. We stride to keep our data as accurate as possible with the limited support we have from UCI. Please take that into consideration while using this API. Terms & Conditions There are no hard policies at the moment for utilizing this tool. However, please refrain from abusing the API by methods such as: sending excessive amount of requests in a small period of time or purposely looking to exploit the system. This tool is here mainly to assist developers in bringing their idea to life to benefit all UCI students. Please don't ruin it for others! \ud83d\ude42","title":"Disclaimer"},{"location":"Contributing/","text":"Contributing Info Most information is incomplete. Repo Overview Folder Purpose /cache Houses the local data cache /email Outgoing email templates for various purposes /keys Middleware for API Key Authentication feature /public Assets to be accessible via Public URL /rest Contains the very heart and soul of the REST API /test Self-explainatory /views Text /utils Utilities for server maintenance Initial Setup Failure Documentation being developed Documentation \ud83e\udd14 Documentation for the documentation. How do you contribute to the documentation? The documentation you see right now is created via MkDocs . We use a specific extension called Material for MkDocs which is what makes this site look pretty. For Graph static documentation, we use graphdoc . While it is a little buggy, it's the best tool I'm aware of that automatically generates static documentation. To update it, you will need two shells open. Shell 1 In the first shell, install dependencies and start the server. npm install npm start That's it, leave it alone. We need the server to be on because graphdoc will be using the live GraphQL endpoint Shell 2 In the next shell, run this command: Windows graphdoc -e http://localhost:8080/graphql -o .\\graphql\\docs --force macOS/Linux graphdoc -e http://localhost:8080/graphql -o graphql/docs --force This specifies the endpoint for GraphQL to use and forces an update on existing documentation files. Writing Documentation \ud83d\udcdd Writing documentation is simple with MkDocs. Checkout the docs branch. All edits to documentation should be made within this branch Make your changes to the markdown ( .md ) files within /docs . You can add or delete files as you so choose. Create a pull request to master . Once your pull request is merged with master , the documentation site will be automatically rebuilt. How is the docs site updated? All documentation site files are built within /docs-site . A Github Action, /.github/workflows/docs.yml automatically rebuilds the site on every push to master. docs.yml calls mkdocs , a python package, to build the site and automatically commit the new changes. Designing Documentation \u2728 Make your documentation user-friendly. \ud83d\udc40 Preview your changes live. \ud83d\udc0d Our documentation website is made through Material for MkDocs , a python package. To setup mkdocs-material , see their cool instructions . Configure documentation site settings in /mkdocs.yml .","title":"Contributing"},{"location":"Contributing/#contributing","text":"Info Most information is incomplete.","title":"Contributing"},{"location":"Contributing/#repo-overview","text":"Folder Purpose /cache Houses the local data cache /email Outgoing email templates for various purposes /keys Middleware for API Key Authentication feature /public Assets to be accessible via Public URL /rest Contains the very heart and soul of the REST API /test Self-explainatory /views Text /utils Utilities for server maintenance","title":"Repo Overview"},{"location":"Contributing/#initial-setup","text":"Failure Documentation being developed","title":"Initial Setup"},{"location":"Contributing/#documentation","text":"\ud83e\udd14 Documentation for the documentation. How do you contribute to the documentation? The documentation you see right now is created via MkDocs . We use a specific extension called Material for MkDocs which is what makes this site look pretty. For Graph static documentation, we use graphdoc . While it is a little buggy, it's the best tool I'm aware of that automatically generates static documentation. To update it, you will need two shells open. Shell 1 In the first shell, install dependencies and start the server. npm install npm start That's it, leave it alone. We need the server to be on because graphdoc will be using the live GraphQL endpoint Shell 2 In the next shell, run this command: Windows graphdoc -e http://localhost:8080/graphql -o .\\graphql\\docs --force macOS/Linux graphdoc -e http://localhost:8080/graphql -o graphql/docs --force This specifies the endpoint for GraphQL to use and forces an update on existing documentation files.","title":"Documentation"},{"location":"Contributing/#writing-documentation","text":"\ud83d\udcdd Writing documentation is simple with MkDocs. Checkout the docs branch. All edits to documentation should be made within this branch Make your changes to the markdown ( .md ) files within /docs . You can add or delete files as you so choose. Create a pull request to master . Once your pull request is merged with master , the documentation site will be automatically rebuilt. How is the docs site updated? All documentation site files are built within /docs-site . A Github Action, /.github/workflows/docs.yml automatically rebuilds the site on every push to master. docs.yml calls mkdocs , a python package, to build the site and automatically commit the new changes.","title":"Writing Documentation"},{"location":"Contributing/#designing-documentation","text":"\u2728 Make your documentation user-friendly. \ud83d\udc40 Preview your changes live. \ud83d\udc0d Our documentation website is made through Material for MkDocs , a python package. To setup mkdocs-material , see their cool instructions . Configure documentation site settings in /mkdocs.yml .","title":"Designing Documentation"},{"location":"Getting-Started/Register-Here/","text":"Register Here Please enter your information below to receive an API key and get started. You will need a key to access PeterPortal web services. input, textarea{ border: 1px solid black; padding: 5px; margin: 3px; border-radius: 5px; font-family: \"Roboto\"; } .required, .required-fields{ color: red; font-size: 12px; } label.error { font-size: 11px; color: red; } .btn { border: 1px solid black; padding: 5px; border-radius: 5px; margin: 3px; } * Required fields First Name * Last Name * Email * App Name * Website URL How will you use the API? Signup","title":"Register"},{"location":"Getting-Started/Register-Here/#register-here","text":"Please enter your information below to receive an API key and get started. You will need a key to access PeterPortal web services. input, textarea{ border: 1px solid black; padding: 5px; margin: 3px; border-radius: 5px; font-family: \"Roboto\"; } .required, .required-fields{ color: red; font-size: 12px; } label.error { font-size: 11px; color: red; } .btn { border: 1px solid black; padding: 5px; border-radius: 5px; margin: 3px; } * Required fields First Name * Last Name * Email * App Name * Website URL How will you use the API? Signup","title":"Register Here"},{"location":"Getting-Started/Using-Your-API-Key/","text":"Using an API Key How to use your API key To use your api key, add it to the headers of your request, with x-api-key as the key and your api key as the value. x-api-key: YOUR_API_KEY_HERE curl $ curl https://api.peterportal.org/rest/v0/courses/all --header \"x-api-key: YOUR_API_KEY_HERE\" [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests # >>>$ headers = { \"x-api-key\" : \"YOUR_API_KEY_HERE\" } # >>>$ response = requests.get ( \"https://api.peterportal.org/rest/v0/courses/all\" , headers = headers ) # >>>$ response.json () [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] Failing to provide valid credentials will respond with a JSON error object. 401 Unauthorized { \"timestamp\": \"Fri, 01 Jan 2021 00:00:00 GMT\", \"status\": 401, \"error\": \"Invalid Credentials.\", \"message\": \"The credentials found were invalid. Please ensure a valid api key is in the request. See documentation for more info.\" } Securing your API key It is important that you keep your api key a secret and do NOT share it with others. Ensure you do not include your api key when committing to a public repository such as GitHub. For some helpful tips on how to keep your api key safe, please click here .","title":"Using Your API Key"},{"location":"Getting-Started/Using-Your-API-Key/#using-an-api-key","text":"","title":"Using an API Key"},{"location":"Getting-Started/Using-Your-API-Key/#how-to-use-your-api-key","text":"To use your api key, add it to the headers of your request, with x-api-key as the key and your api key as the value. x-api-key: YOUR_API_KEY_HERE curl $ curl https://api.peterportal.org/rest/v0/courses/all --header \"x-api-key: YOUR_API_KEY_HERE\" [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests # >>>$ headers = { \"x-api-key\" : \"YOUR_API_KEY_HERE\" } # >>>$ response = requests.get ( \"https://api.peterportal.org/rest/v0/courses/all\" , headers = headers ) # >>>$ response.json () [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] Failing to provide valid credentials will respond with a JSON error object. 401 Unauthorized { \"timestamp\": \"Fri, 01 Jan 2021 00:00:00 GMT\", \"status\": 401, \"error\": \"Invalid Credentials.\", \"message\": \"The credentials found were invalid. Please ensure a valid api key is in the request. See documentation for more info.\" }","title":"How to use your API key"},{"location":"Getting-Started/Using-Your-API-Key/#securing-your-api-key","text":"It is important that you keep your api key a secret and do NOT share it with others. Ensure you do not include your api key when committing to a public repository such as GitHub. For some helpful tips on how to keep your api key safe, please click here .","title":"Securing your API key"},{"location":"GraphQL-API/start_here/","text":"Start here GraphQL is not an application; rather, it is a Query Language for Web APIs. Try it out You can try out our documentation live at our GraphQL Playground . Not only can you try it out, but our Playground also has the most up-to-date docs -- we highly recommend you check it out if you're interested in learning GraphQL or using our endpoint. Example Query Here is an example which returns the ID, name, and department of every course in our database. You can paste this into our GraphQL Playground , or write this in the body of a POST request. query { allCourses { id name department } } Documentation \ud83d\udcc3 Checkout our documentation at api.peterportal.org/graphql-docs/ .","title":"Start Here"},{"location":"GraphQL-API/start_here/#start-here","text":"GraphQL is not an application; rather, it is a Query Language for Web APIs.","title":"Start here"},{"location":"GraphQL-API/start_here/#try-it-out","text":"You can try out our documentation live at our GraphQL Playground . Not only can you try it out, but our Playground also has the most up-to-date docs -- we highly recommend you check it out if you're interested in learning GraphQL or using our endpoint. Example Query Here is an example which returns the ID, name, and department of every course in our database. You can paste this into our GraphQL Playground , or write this in the body of a POST request. query { allCourses { id name department } }","title":"Try it out"},{"location":"GraphQL-API/start_here/#documentation","text":"\ud83d\udcc3 Checkout our documentation at api.peterportal.org/graphql-docs/ .","title":"Documentation"},{"location":"REST-API/courses/","text":"\ud83d\udcda Find information on UC Irvine courses here Try out one of these quick ways to play with our courses endpoints: curl $ curl https://api.peterportal.org/rest/v0/courses/all --header \"x-api-key: YOUR_API_KEY_HERE\" [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests # >>>$ headers = { \"x-api-key\" : \"YOUR_API_KEY_HERE\" } # >>>$ response = requests.get ( \"https://api.peterportal.org/rest/v0/courses/all\" , headers = headers ) # >>>$ response.json () [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] /courses/all GET all courses Code Description 200 A list of all courses available on the UCI Catalogue. Each element is a JSON object containing information on each course (department, number, title, and description) 200 Successful Response [ ... { \"department\" : \"I&C SCI\" , \"number\" : \"51\" , \"title\" : \"Introductory Computer Organization\" , \"description\" : \"Multilevel view of system hardware and software...\" }, ... ] /courses/{courseID} GET detailed information on a specific course Parameters Parameter Description Example courseID Course department + course number (without spaces) I&CSCI53, COMPSCI122B, BIOSCI43 Responses Code Description 200 A JSON object containing every information available on a specific course. 404 Invaild ID/Course not found 200 Successful Response /courses/I&CSCI53 returns { \"id\" : \"I&C SCI 53\" , \"department\" : \"I&C SCI\" , \"number\" : \"53\" , \"school\" : \"Donald Bren School of Information and Computer Sciences\" , \"title\" : \"Principles in System Design\" , \"course_level\" : \"Lower Division (1-99)\" , \"department_alias\" : [ \"ICS\" ], \"units\" : [ 4 , 4 ], \"description\" : \"Introduces basic principles of system software: operating systems, compilers, and networking. Exposure to the following topics through theoretical and practical programming experiences: linking and loading, process and memory management, concurrency and synchronization, network communication, programming for performance, etc.\" , \"department_name\" : \"Information and Computer Science\" , \"professor_history\" : [ \"iharris\" , \"klefstad\" , \"jwongma\" ], \"prerequisite_tree\" : \"{\\\"AND\\\":[\\\"I&C SCI 51\\\"]}\" , \"prerequisite_list\" : [ \"I&C SCI 51\" ], \"prerequisite_text\" : \"I&C SCI 51\" , \"dependencies\" : [ \"COMPSCI 122C\" , \"COMPSCI 131\" , \"COMPSCI 222\" , \"I&C SCI 53L\" ], \"repeatability\" : \"\" , \"grading_option\" : \"\" , \"concurrent\" : \"\" , \"same_as\" : \"\" , \"restriction\" : \"\" , \"overlap\" : \"\" , \"corequisite\" : \" I&C SCI 53L\" , \"ge_list\" : [], \"ge_text\" : \"\" , \"terms\" : [ \"2019 Spring\" , \"2020 Fall\" , \"2019 Fall\" , \"2019 Winter\" , \"2018 Winter\" , \"2018 Spring\" , \"2017 Winter\" , \"2017 Spring\" ] } 404 Not Found /courses/I&CSCI5555 returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 404 , \"error\" : \"Bad Request: Invalid parameter\" , \"message\" : \"Course not found\" , }","title":"Courses"},{"location":"REST-API/courses/#coursesall","text":"GET all courses Code Description 200 A list of all courses available on the UCI Catalogue. Each element is a JSON object containing information on each course (department, number, title, and description) 200 Successful Response [ ... { \"department\" : \"I&C SCI\" , \"number\" : \"51\" , \"title\" : \"Introductory Computer Organization\" , \"description\" : \"Multilevel view of system hardware and software...\" }, ... ]","title":"/courses/all"},{"location":"REST-API/courses/#coursescourseid","text":"GET detailed information on a specific course","title":"/courses/{courseID}"},{"location":"REST-API/courses/#parameters","text":"Parameter Description Example courseID Course department + course number (without spaces) I&CSCI53, COMPSCI122B, BIOSCI43","title":"Parameters"},{"location":"REST-API/courses/#responses","text":"Code Description 200 A JSON object containing every information available on a specific course. 404 Invaild ID/Course not found 200 Successful Response /courses/I&CSCI53 returns { \"id\" : \"I&C SCI 53\" , \"department\" : \"I&C SCI\" , \"number\" : \"53\" , \"school\" : \"Donald Bren School of Information and Computer Sciences\" , \"title\" : \"Principles in System Design\" , \"course_level\" : \"Lower Division (1-99)\" , \"department_alias\" : [ \"ICS\" ], \"units\" : [ 4 , 4 ], \"description\" : \"Introduces basic principles of system software: operating systems, compilers, and networking. Exposure to the following topics through theoretical and practical programming experiences: linking and loading, process and memory management, concurrency and synchronization, network communication, programming for performance, etc.\" , \"department_name\" : \"Information and Computer Science\" , \"professor_history\" : [ \"iharris\" , \"klefstad\" , \"jwongma\" ], \"prerequisite_tree\" : \"{\\\"AND\\\":[\\\"I&C SCI 51\\\"]}\" , \"prerequisite_list\" : [ \"I&C SCI 51\" ], \"prerequisite_text\" : \"I&C SCI 51\" , \"dependencies\" : [ \"COMPSCI 122C\" , \"COMPSCI 131\" , \"COMPSCI 222\" , \"I&C SCI 53L\" ], \"repeatability\" : \"\" , \"grading_option\" : \"\" , \"concurrent\" : \"\" , \"same_as\" : \"\" , \"restriction\" : \"\" , \"overlap\" : \"\" , \"corequisite\" : \" I&C SCI 53L\" , \"ge_list\" : [], \"ge_text\" : \"\" , \"terms\" : [ \"2019 Spring\" , \"2020 Fall\" , \"2019 Fall\" , \"2019 Winter\" , \"2018 Winter\" , \"2018 Spring\" , \"2017 Winter\" , \"2017 Spring\" ] } 404 Not Found /courses/I&CSCI5555 returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 404 , \"error\" : \"Bad Request: Invalid parameter\" , \"message\" : \"Course not found\" , }","title":"Responses"},{"location":"REST-API/grades/","text":"\ud83c\udd70 Find information on UCI grades here. Try out one of these quick ways to play with our grades endpoints: curl $ curl https://api.peterportal.org/rest/v0/grades/raw --header \"x-api-key: YOUR_API_KEY_HERE\" [ ... { \"year\": \"2018-19\", \"quarter\": \"FALL\", \"department\": \"I&C SCI\", \"number\": \"33\", \"code\": 36620, \"section\": \"A\", \"instructor\": \"PATTIS, R.\", \"type\": \"LEC\", \"gradeACount\": 125, \"gradeBCount\": 72, \"gradeCCount\": 31, \"gradeDCount\": 16, \"gradeFCount\": 33, \"gradePCount\": 1, \"gradeNPCount\": 0, \"gradeWCount\": 1, \"averageGPA\": 2.84 }, ... ] python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests # >>>$ headers = { \"x-api-key\" : \"YOUR_API_KEY_HERE\" } # >>>$ response = requests.get ( \"https://api.peterportal.org/rest/v0/grades/raw\" , headers = headers ) # >>>$ response.json () [ ... [ ... { \"year\": \"2018-19\", \"quarter\": \"FALL\", \"department\": \"I&C SCI\", \"number\": \"33\", \"code\": 36620, \"section\": \"A\", \"instructor\": \"PATTIS, R.\", \"type\": \"LEC\", \"gradeACount\": 125, \"gradeBCount\": 72, \"gradeCCount\": 31, \"gradeDCount\": 16, \"gradeFCount\": 33, \"gradePCount\": 1, \"gradeNPCount\": 0, \"gradeWCount\": 1, \"averageGPA\": 2.84 }, ... ] /grades/raw GET a list of grade distribution results via a query/ Parameters Info Endpoint that utilize query params must follow by this format: ?key1=value1&key2=value2 ? is use to start the query params string with & to separate each param Warning One problem with department such as I&C SCI and CRM/LAW, since the & and / are reserved for URLs, you must use their URL encode representation. I&C SCI -> I%26C SCI CRM/LAW -> CRM%2FLAW Parameter Description Example year School year, must be <START_YEAR>-<END_YEAR> 2019-20 quarter Quarter, options are Fall, Winter, Spring Fall instructor Instructor, must following the format (<last_name>, <first_initial>.) PATTIS, R. department Department short-hand I&C SCI number Course number 32A code 5-digit course code on WebSoC 35540 Tip All params are optional and multiple can be included by using ; as a separator. i.e. key1=value1;value2&key2=value2 Tip The more you narrow down your query, the faster the response! \ud83c\udfc3\u200d\u2640\ufe0f\ud83d\udca8 \ud83d\ude0e Response Code Description 200 A list of JSON object results containing the course info, count of each grades, and average GPA 400 Invalid parameter syntax. 200 Successful Response To lookup grade distribution for I&C SCI 33 during the school year 2018-19 and 2019-20 taught by professor Pattis: /grades/raw?year=2018-19;2019-20&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns [ { \"year\" : \"2018-19\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 36620 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" , \"gradeACount\" : 125 , \"gradeBCount\" : 72 , \"gradeCCount\" : 31 , \"gradeDCount\" : 16 , \"gradeFCount\" : 33 , \"gradePCount\" : 1 , \"gradeNPCount\" : 0 , \"gradeWCount\" : 1 , \"averageGPA\" : 2.84 }, { \"year\" : \"2019-20\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 35500 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" , \"gradeACount\" : 132 , \"gradeBCount\" : 83 , \"gradeCCount\" : 41 , \"gradeDCount\" : 18 , \"gradeFCount\" : 36 , \"gradePCount\" : 0 , \"gradeNPCount\" : 3 , \"gradeWCount\" : 1 , \"averageGPA\" : 2.8 } ] 400 Bad Request /grades/raw?year=2018&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 400 , \"error\" : \"Bad Request: Invalid syntax in parameters\" , \"message\" : \"Invalid syntax found in parameters. Exception occured at '2018' in the [year] query value\" , } /grades/calculated GET a list of grade distribution results via a query/ Parameters Please follow the above documentation on the /grades/raw endpoint, for information about the parameters. Response Code Description 200 A JSON object containing statistics of the grade distribution on all the courses found, and a list of the courses found. 400 Invalid parameter syntax. 200 Successful Response To lookup grade distribution for I&C SCI 33 during the school year 2018-19 and 2019-20 taught by professor Pattis: /grades/calculated?year=2018-19;2019-20&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns { \"gradeDistribution\" : { \"SUM(gradeACount)\" : 257 , \"SUM(gradeBCount)\" : 155 , \"SUM(gradeCCount)\" : 72 , \"SUM(gradeDCount)\" : 34 , \"SUM(gradeFCount)\" : 69 , \"SUM(gradePCount)\" : 1 , \"SUM(gradeNPCount)\" : 3 , \"SUM(gradeWCount)\" : 2 , \"AVG(averageGPA)\" : 2.82 , \"COUNT()\" : 2 }, \"courseList\" : [ { \"year\" : \"2018-19\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 36620 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" }, { \"year\" : \"2019-20\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 35500 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" } ] } 400 Bad Request /grades/calculated?year=2018&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 400 , \"error\" : \"Bad Request: Invalid syntax in parameters\" , \"message\" : \"Invalid syntax found in parameters. Exception occured at '2018' in the [year] query value\" , }","title":"Grades"},{"location":"REST-API/grades/#gradesraw","text":"GET a list of grade distribution results via a query/","title":"/grades/raw"},{"location":"REST-API/grades/#parameters","text":"Info Endpoint that utilize query params must follow by this format: ?key1=value1&key2=value2 ? is use to start the query params string with & to separate each param Warning One problem with department such as I&C SCI and CRM/LAW, since the & and / are reserved for URLs, you must use their URL encode representation. I&C SCI -> I%26C SCI CRM/LAW -> CRM%2FLAW Parameter Description Example year School year, must be <START_YEAR>-<END_YEAR> 2019-20 quarter Quarter, options are Fall, Winter, Spring Fall instructor Instructor, must following the format (<last_name>, <first_initial>.) PATTIS, R. department Department short-hand I&C SCI number Course number 32A code 5-digit course code on WebSoC 35540 Tip All params are optional and multiple can be included by using ; as a separator. i.e. key1=value1;value2&key2=value2 Tip The more you narrow down your query, the faster the response! \ud83c\udfc3\u200d\u2640\ufe0f\ud83d\udca8 \ud83d\ude0e","title":"Parameters"},{"location":"REST-API/grades/#response","text":"Code Description 200 A list of JSON object results containing the course info, count of each grades, and average GPA 400 Invalid parameter syntax. 200 Successful Response To lookup grade distribution for I&C SCI 33 during the school year 2018-19 and 2019-20 taught by professor Pattis: /grades/raw?year=2018-19;2019-20&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns [ { \"year\" : \"2018-19\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 36620 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" , \"gradeACount\" : 125 , \"gradeBCount\" : 72 , \"gradeCCount\" : 31 , \"gradeDCount\" : 16 , \"gradeFCount\" : 33 , \"gradePCount\" : 1 , \"gradeNPCount\" : 0 , \"gradeWCount\" : 1 , \"averageGPA\" : 2.84 }, { \"year\" : \"2019-20\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 35500 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" , \"gradeACount\" : 132 , \"gradeBCount\" : 83 , \"gradeCCount\" : 41 , \"gradeDCount\" : 18 , \"gradeFCount\" : 36 , \"gradePCount\" : 0 , \"gradeNPCount\" : 3 , \"gradeWCount\" : 1 , \"averageGPA\" : 2.8 } ] 400 Bad Request /grades/raw?year=2018&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 400 , \"error\" : \"Bad Request: Invalid syntax in parameters\" , \"message\" : \"Invalid syntax found in parameters. Exception occured at '2018' in the [year] query value\" , }","title":"Response"},{"location":"REST-API/grades/#gradescalculated","text":"GET a list of grade distribution results via a query/","title":"/grades/calculated"},{"location":"REST-API/grades/#parameters_1","text":"Please follow the above documentation on the /grades/raw endpoint, for information about the parameters.","title":"Parameters"},{"location":"REST-API/grades/#response_1","text":"Code Description 200 A JSON object containing statistics of the grade distribution on all the courses found, and a list of the courses found. 400 Invalid parameter syntax. 200 Successful Response To lookup grade distribution for I&C SCI 33 during the school year 2018-19 and 2019-20 taught by professor Pattis: /grades/calculated?year=2018-19;2019-20&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns { \"gradeDistribution\" : { \"SUM(gradeACount)\" : 257 , \"SUM(gradeBCount)\" : 155 , \"SUM(gradeCCount)\" : 72 , \"SUM(gradeDCount)\" : 34 , \"SUM(gradeFCount)\" : 69 , \"SUM(gradePCount)\" : 1 , \"SUM(gradeNPCount)\" : 3 , \"SUM(gradeWCount)\" : 2 , \"AVG(averageGPA)\" : 2.82 , \"COUNT()\" : 2 }, \"courseList\" : [ { \"year\" : \"2018-19\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 36620 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" }, { \"year\" : \"2019-20\" , \"quarter\" : \"FALL\" , \"department\" : \"I&C SCI\" , \"number\" : \"33\" , \"code\" : 35500 , \"section\" : \"A\" , \"instructor\" : \"PATTIS, R.\" , \"type\" : \"LEC\" } ] } 400 Bad Request /grades/calculated?year=2018&instructor=PATTIS, R.&department=I%26C SCI&quarter=Fall&number=33 returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 400 , \"error\" : \"Bad Request: Invalid syntax in parameters\" , \"message\" : \"Invalid syntax found in parameters. Exception occured at '2018' in the [year] query value\" , }","title":"Response"},{"location":"REST-API/instructors/","text":"\ud83d\udc69\u200d\ud83c\udfeb Find information on UCI instructors here. Try out one of these quick ways to play with our instructors endpoints: curl $ curl https://api.peterportal.org/rest/v0/instructors/all --header \"x-api-key: YOUR_API_KEY_HERE\" [ ... { \"name\": \"Michael Shindler\", \"ucinetid\": \"mikes\", \"title\": \"Assistant Professor of Teaching\", \"department\": \"Computer Science\" }, ... ] python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests # >>>$ headers = { \"x-api-key\" : \"YOUR_API_KEY_HERE\" } # >>>$ response = requests.get ( \"https://api.peterportal.org/rest/v0/instructors/all\" , headers = headers ) # >>>$ response.json () [ ... [ ... { \"name\": \"Michael Shindler\", \"ucinetid\": \"mikes\", \"title\": \"Assistant Professor of Teaching\", \"department\": \"Computer Science\" }, ... ] /instructors/all GET all instructors Parameters None. \ud83d\udc83 Responses Code Description 200 A list of all instructors available on the UCI Catalogue. Each element is a JSON object containing information on each instructor (name, ucinetid, title, department). 200 Successful Response [ ... { \"name\" : \"Michael Shindler\" , \"ucinetid\" : \"mikes\" , \"title\" : \"Assistant Professor of Teaching\" , \"department\" : \"Computer Science\" }, ... ] /instructors/{ucinetid} GET detailed information on a specific instructor Parameters Parameter Description Example ucinetid Can be obtained using the /all endpoint above Responses Code Description 200 A JSON object containing every information available on a specific instructor 404 Invaild UCInetID/Instructor not found 200 Succesful Response /instructors/mikes returns { \"name\" : \"Michael Shindler\" , \"ucinetid\" : \"mikes\" , \"phone\" : \"\" , \"title\" : \"Assistant Professor of Teaching\" , \"department\" : \"Computer Science\" , \"schools\" : [ \"Donald Bren School of Information and Computer Sciences\" ], \"related_departments\" : [ \"COMPSCI\" , \"IN4MATX\" , \"I&C SCI\" , \"SWE\" , \"STATS\" ], \"course_history\" : [ \"COMPSCI 199\" , \"COMPSCI H198\" , \"I&C SCI 46\" , \"COMPSCI 167\" , \"COMPSCI 161\" , \"COMPSCI 269S\" , \"COMPSCI 260P\" , \"COMPSCI 162\" ] } 404 Not Found /instructors/nonexistent returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 404 , \"error\" : \"Bad Request: Invalid parameter\" , \"message\" : \"Instructor not found\" , }","title":"Instructors"},{"location":"REST-API/instructors/#instructorsall","text":"GET all instructors","title":"/instructors/all"},{"location":"REST-API/instructors/#parameters","text":"None. \ud83d\udc83","title":"Parameters"},{"location":"REST-API/instructors/#responses","text":"Code Description 200 A list of all instructors available on the UCI Catalogue. Each element is a JSON object containing information on each instructor (name, ucinetid, title, department). 200 Successful Response [ ... { \"name\" : \"Michael Shindler\" , \"ucinetid\" : \"mikes\" , \"title\" : \"Assistant Professor of Teaching\" , \"department\" : \"Computer Science\" }, ... ]","title":"Responses"},{"location":"REST-API/instructors/#instructorsucinetid","text":"GET detailed information on a specific instructor","title":"/instructors/{ucinetid}"},{"location":"REST-API/instructors/#parameters_1","text":"Parameter Description Example ucinetid Can be obtained using the /all endpoint above","title":"Parameters"},{"location":"REST-API/instructors/#responses_1","text":"Code Description 200 A JSON object containing every information available on a specific instructor 404 Invaild UCInetID/Instructor not found 200 Succesful Response /instructors/mikes returns { \"name\" : \"Michael Shindler\" , \"ucinetid\" : \"mikes\" , \"phone\" : \"\" , \"title\" : \"Assistant Professor of Teaching\" , \"department\" : \"Computer Science\" , \"schools\" : [ \"Donald Bren School of Information and Computer Sciences\" ], \"related_departments\" : [ \"COMPSCI\" , \"IN4MATX\" , \"I&C SCI\" , \"SWE\" , \"STATS\" ], \"course_history\" : [ \"COMPSCI 199\" , \"COMPSCI H198\" , \"I&C SCI 46\" , \"COMPSCI 167\" , \"COMPSCI 161\" , \"COMPSCI 269S\" , \"COMPSCI 260P\" , \"COMPSCI 162\" ] } 404 Not Found /instructors/nonexistent returns { \"timestamp\" : \"Thu, 31 Dec 2020 00:00:00 GMT\" , \"status\" : 404 , \"error\" : \"Bad Request: Invalid parameter\" , \"message\" : \"Instructor not found\" , }","title":"Responses"},{"location":"REST-API/schedule/","text":"Schedule /schedule/soc GET schedule of classes data This API allows access to school, department, course, and section data in a hierarchical JSON format. It pulls information from the schedule of classes (WebSoc). Parameters Info Endpoint that utilize query params must follow by this format: ?key1=value1&key2=value2 ? is use to start the query params string with & to separate each param Warning One problem with department such as I&C SCI and CRM/LAW, since the & and / are reserved for URLs, you must use their URL encode representation. I&C SCI -> I%26C SCI CRM/LAW -> CRM%2FLAW Descriptions found here Name Formatting Notes term [Year] ['Fall'|'Winter'|'Spring'|'Summer1'|'Summer2'|'Summer10wk'] Example: '2017 Fall' Default: ' ' Required. Schedule for your selected term must be available on WebSoc. ge ['ANY'|'GE-1A'|'GE-1B'|'GE-2'|'GE-3'|'GE-4'|'GE-5A'|'GE-5B'|'GE-6'|'GE-7'|'GE-8'] Example: 'GE-1B' Default: ' ' Must specify at least one of department, GE, courseCodes, or instructorName department List of available departments to search available in file depts.txt Example: 'I&C SCI' Default: ' ' Must specify at least one of department, GE, courseCodes, or instructorName courseNumber Any valid course number or range Example: '32A' OR '31-33' Default: ' ' division ['ALL'|'LowerDiv'|'UpperDiv'|'Graduate'] Example: 'LowerDiv' Default: 'ALL' sectionCodes Any valid 5-digit course code or range Example: \"36531\" OR \"36520-36536\" Default: ' ' Must specify at least one of department, GE, courseCodes, or instructorName instructorName Any valid instructor last name or part of last name Example: 'Thornton' Default: ' ' Enter last name only courseTitle Any text Example: 'Intro' Default: ' ' sectionType ['ALL'|'ACT'|'COL'|'DIS'|'FLD'|'LAB'|'LEC'|'QIZ'|'RES'|'SEM'|'STU'|'TAP'|'TUT'] Example: 'LAB' Default: 'ALL' units Any integer or decimal with only tenths place precision, or 'VAR' to look for variable unit classes only. Example: '5' OR '1.3' Default: ' ' days ['M'|'T'|'W'|'Th'|'F'] or a combination of these days Example: 'T' OR 'MWF' Default: ' ' startTime Any time in 12 hour format Example: '10:00AM' OR '5:00PM' Default: ' ' Only enter sharp hours endTime Any time in 12 hour format Example: '12:00AM' OR '6:00PM' Default: ' ' Only enter sharp hours maxCapacity Exact number like '300' or modified with '<' or '>' to indicate less than specified or greater than specified. Example: '>256' OR '19' OR '<19' Default: ' ' fullCourses ['ANY'|'SkipFullWaitlist'|'FullOnly'|'OverEnrolled'] 'SkipFullWaitlist' means that full courses will be included if there's space on the wait-list 'FullOnly' means only full courses will be retrieved 'OverEnrolled' means only over-enrolled courses will be retrieved Example:'SkipFullWaitlist' Default: 'ANY' cancelledCourses ['Exclude'|'Include'|'Only'] Example: 'Include' Default: 'EXCLUDE' building Any valid building code Example: 'DBH' Default: ' ' The value is a building code. Building codes found here: https://www.reg.uci.edu/addl/campus/ room Any valid room number Example: '223' Default: ' ' You must specify a building code if you specify a room number Tip All params are optional and multiple can be included by using ; as a separator. i.e. key1=value1;value2&key2=value2 Tip The more you narrow down your query, the faster the response! \ud83c\udfc3\u200d\u2640\ufe0f\ud83d\udca8 \ud83d\ude0e Response Code Description 200 A list of JSON object results containing the course info, count of each grades, and average GPA 400 Invalid parameter syntax. This endpoint is based off of this npm package .","title":"Schedule"},{"location":"REST-API/schedule/#schedule","text":"","title":"Schedule"},{"location":"REST-API/schedule/#schedulesoc","text":"GET schedule of classes data This API allows access to school, department, course, and section data in a hierarchical JSON format. It pulls information from the schedule of classes (WebSoc).","title":"/schedule/soc"},{"location":"REST-API/schedule/#parameters","text":"Info Endpoint that utilize query params must follow by this format: ?key1=value1&key2=value2 ? is use to start the query params string with & to separate each param Warning One problem with department such as I&C SCI and CRM/LAW, since the & and / are reserved for URLs, you must use their URL encode representation. I&C SCI -> I%26C SCI CRM/LAW -> CRM%2FLAW Descriptions found here Name Formatting Notes term [Year] ['Fall'|'Winter'|'Spring'|'Summer1'|'Summer2'|'Summer10wk'] Example: '2017 Fall' Default: ' ' Required. Schedule for your selected term must be available on WebSoc. ge ['ANY'|'GE-1A'|'GE-1B'|'GE-2'|'GE-3'|'GE-4'|'GE-5A'|'GE-5B'|'GE-6'|'GE-7'|'GE-8'] Example: 'GE-1B' Default: ' ' Must specify at least one of department, GE, courseCodes, or instructorName department List of available departments to search available in file depts.txt Example: 'I&C SCI' Default: ' ' Must specify at least one of department, GE, courseCodes, or instructorName courseNumber Any valid course number or range Example: '32A' OR '31-33' Default: ' ' division ['ALL'|'LowerDiv'|'UpperDiv'|'Graduate'] Example: 'LowerDiv' Default: 'ALL' sectionCodes Any valid 5-digit course code or range Example: \"36531\" OR \"36520-36536\" Default: ' ' Must specify at least one of department, GE, courseCodes, or instructorName instructorName Any valid instructor last name or part of last name Example: 'Thornton' Default: ' ' Enter last name only courseTitle Any text Example: 'Intro' Default: ' ' sectionType ['ALL'|'ACT'|'COL'|'DIS'|'FLD'|'LAB'|'LEC'|'QIZ'|'RES'|'SEM'|'STU'|'TAP'|'TUT'] Example: 'LAB' Default: 'ALL' units Any integer or decimal with only tenths place precision, or 'VAR' to look for variable unit classes only. Example: '5' OR '1.3' Default: ' ' days ['M'|'T'|'W'|'Th'|'F'] or a combination of these days Example: 'T' OR 'MWF' Default: ' ' startTime Any time in 12 hour format Example: '10:00AM' OR '5:00PM' Default: ' ' Only enter sharp hours endTime Any time in 12 hour format Example: '12:00AM' OR '6:00PM' Default: ' ' Only enter sharp hours maxCapacity Exact number like '300' or modified with '<' or '>' to indicate less than specified or greater than specified. Example: '>256' OR '19' OR '<19' Default: ' ' fullCourses ['ANY'|'SkipFullWaitlist'|'FullOnly'|'OverEnrolled'] 'SkipFullWaitlist' means that full courses will be included if there's space on the wait-list 'FullOnly' means only full courses will be retrieved 'OverEnrolled' means only over-enrolled courses will be retrieved Example:'SkipFullWaitlist' Default: 'ANY' cancelledCourses ['Exclude'|'Include'|'Only'] Example: 'Include' Default: 'EXCLUDE' building Any valid building code Example: 'DBH' Default: ' ' The value is a building code. Building codes found here: https://www.reg.uci.edu/addl/campus/ room Any valid room number Example: '223' Default: ' ' You must specify a building code if you specify a room number Tip All params are optional and multiple can be included by using ; as a separator. i.e. key1=value1;value2&key2=value2 Tip The more you narrow down your query, the faster the response! \ud83c\udfc3\u200d\u2640\ufe0f\ud83d\udca8 \ud83d\ude0e","title":"Parameters"},{"location":"REST-API/schedule/#response","text":"Code Description 200 A list of JSON object results containing the course info, count of each grades, and average GPA 400 Invalid parameter syntax. This endpoint is based off of this npm package .","title":"Response"},{"location":"REST-API/start_here/","text":"Start here What is a RESTful API? An API is an Application Programming Interface. It's how programs talk to each other. PeterPortal Public API is a Web API, meaning anyone and any app can talk to it over the web! You can use Peterportal Public API to get data for apps that help students. To call a Web API RESTful, or REST, means that it meets a set of communication standards. First of all, REST is an an acronym: RE presentational S tate T ransfer. But that doesn't really help understanding it :'( There's a lot that REST APIs are used for, but I'll explain it more in the scope of what you can do with PeterPortal API. A REST API is Stateless. This means that it does not rely on nor take into account previous messages that you sent to it. That means for each request you send to it, you need to send all the information that the REST API needs to understand your request. Our REST API returns and accepts JSON . REST APIs are not restricted to JSON; however, that is the standard you will see for almost every public Web API. JSON syntax is kinda like a Python dictionary . Quickstart Try out our REST API using any of the following methods: curl $ curl https://api.peterportal.org/rest/v0/courses/all --header \"x-api-key: YOUR_API_KEY_HERE\" [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests # >>>$ headers = { \"x-api-key\" : \"YOUR_API_KEY_HERE\" } # >>>$ response = requests.get ( \"https://api.peterportal.org/rest/v0/courses/all\" , headers = headers ) # >>>$ response.json () [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] Full documentation can be found here","title":"Start Here"},{"location":"REST-API/start_here/#start-here","text":"","title":"Start here"},{"location":"REST-API/start_here/#what-is-a-restful-api","text":"An API is an Application Programming Interface. It's how programs talk to each other. PeterPortal Public API is a Web API, meaning anyone and any app can talk to it over the web! You can use Peterportal Public API to get data for apps that help students. To call a Web API RESTful, or REST, means that it meets a set of communication standards. First of all, REST is an an acronym: RE presentational S tate T ransfer. But that doesn't really help understanding it :'( There's a lot that REST APIs are used for, but I'll explain it more in the scope of what you can do with PeterPortal API. A REST API is Stateless. This means that it does not rely on nor take into account previous messages that you sent to it. That means for each request you send to it, you need to send all the information that the REST API needs to understand your request. Our REST API returns and accepts JSON . REST APIs are not restricted to JSON; however, that is the standard you will see for almost every public Web API. JSON syntax is kinda like a Python dictionary .","title":"What is a RESTful API?"},{"location":"REST-API/start_here/#quickstart","text":"Try out our REST API using any of the following methods: curl $ curl https://api.peterportal.org/rest/v0/courses/all --header \"x-api-key: YOUR_API_KEY_HERE\" [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] python $ python -m pip install requests ---> 100% $ python Python 3.8.5 # >>>$ import requests # >>>$ headers = { \"x-api-key\" : \"YOUR_API_KEY_HERE\" } # >>>$ response = requests.get ( \"https://api.peterportal.org/rest/v0/courses/all\" , headers = headers ) # >>>$ response.json () [ ... { \"department\": \"I&C SCI\", \"number\": \"51\", \"title\": \"Introductory Computer Organization\", \"description\": \"Multilevel view of system hardware and software...\" }, ... ] Full documentation can be found here","title":"Quickstart"}]}